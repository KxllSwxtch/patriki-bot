import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN")

# ID –≥—Ä—É–ø–ø—ã, –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∏
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ ID - —ç—Ç–æ —á–∏—Å–ª–æ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
class OrderForm(StatesGroup):
    name = State()
    contact = State()
    product = State()
    extra = State()


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω)
user_data = {}


@dp.message(F.text == "/start")
async def start_order(message: types.Message, state: FSMContext):
    await message.reply(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "üõç **–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:** [–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥](https://a.wsxc.cn/ItS5XIV)\n\n"
        "üìå –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
    )
    await state.set_state(OrderForm.name)
    await message.reply("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")


@dp.message(OrderForm.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(OrderForm.contact)
    await message.reply("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä Telegram –∏–ª–∏ WhatsApp:")


@dp.message(OrderForm.contact)
async def get_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    await state.set_state(OrderForm.product)
    await message.reply("üìå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç:")


@dp.message(OrderForm.product, F.text | F.photo)
async def get_product(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    user_data[user_id] = {"name": data["name"], "contact": data["contact"]}

    if message.photo:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Ñ–æ—Ç–æ (–±–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º - –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –º–∞—Å—Å–∏–≤–µ)
        photo_file_id = message.photo[-1].file_id
        await state.update_data(product="[–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞]", photo_file_id=photo_file_id)
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä)
        await state.update_data(product=message.text, photo_file_id=None)
    
    await state.set_state(OrderForm.extra)
    await message.reply(
        "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '/skip' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:"
    )


@dp.message(OrderForm.extra)
async def get_extra(message: types.Message, state: FSMContext):
    extra_text = (
        message.text
        if message.text.lower() != "/skip"
        else "–ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"
    )
    data = await state.get_data()

    order_text = (
        f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:</b>\n"
        f"üë§ {data['name']}\n"
        f"üìû {data['contact']}\n"
        f"üìå {data['product']}\n"
        f"‚úèÔ∏è {extra_text}"
    )

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –ø–æ–¥–ø–∏—Å—å—é, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    if data.get('photo_file_id'):
        await bot.send_photo(
            GROUP_CHAT_ID, 
            photo=data['photo_file_id'], 
            caption=order_text, 
            parse_mode=ParseMode.HTML
        )
    else:
        await bot.send_message(GROUP_CHAT_ID, order_text, parse_mode=ParseMode.HTML)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–°–¥–µ–ª–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∑–∞—è–≤–∫—É", callback_data="repeat_order"
                )
            ]
        ]
    )

    await message.reply("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è!", reply_markup=keyboard)
    await state.clear()


@dp.callback_query(F.data == "repeat_order")
async def repeat_order(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(OrderForm.product)
    await bot.send_message(
        callback_query.from_user.id,
        "üìå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç:",
    )


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
